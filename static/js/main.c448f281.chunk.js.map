{"version":3,"sources":["models/dictionary.ts","state.tsx","components/Overview.tsx","models/cycledDictionary.ts","models/duplicatedDictionary.ts","models/forkedDictionary.ts","models/chainedDictionary.ts","hooks/useValidation.ts","components/Dictionary.tsx","components/App.tsx","index.tsx"],"names":["warning","storeInLocalStorage","name","object","window","localStorage","setItem","JSON","stringify","StateContext","createContext","dictionaries","id","structures","service","addDictionary","deleteDictionary","addPair","key","value","deletePair","did","pid","updatePair","updateStructure","StateProvider","initialState","children","useState","setDictionaries","setStructures","useMemo","uuidv4","newValue","filter","x","rest","dictionaryId","warnings","pairId","map","newStructures","Provider","useStateValue","useContext","NewDictionaryForm","setName","updateName","useCallback","event","target","preventDefault","className","onSubmit","data-testid","onChange","Overwiew","to","title","onClick","color","Dictionary","pairs","watningLevel","dictionary","Map","this","buildDictionary","pair","val","get","Set","set","add","DuplicatedDictionary","duplicate","result","dict","has","ForkedDictionary","fork","size","keys","v","ChainedDictionary","chain","undefined","CycledDictionary","loop","colors","stack","black","gray","push","child","findLoop","pop","idx","indexOf","slice","white","loops","forEach","i","length","useValidation","isValidating","setIsValidating","useEffect","markWarnings","hasChanges","newStructure","levels","reduce","curr","next","level","NewPairForm","useParams","newPair","setNewPair","updateNewPair","newVal","DictionaryItem","React","memo","item","updateItem","deleteItem","onUpdate","classNames","DictionaryWarnings","find","structure","App","parse","getItem","getFromLocalStorage","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c448f281.chunk.js","sourcesContent":["export enum warning {\n  none = 0,\n  duplicate = 1,\n  fork = 2,\n  chain = 3,\n  loop = 4\n}\n\nexport type Pair = { key: string; value: string };\n\nabstract class Dictionary {\n  protected dictionary: Map<string, Set<string>> = new Map();\n\n  constructor(protected pairs: Pair[], protected watningLevel: warning) {\n    this.buildDictionary();\n  }\n  private buildDictionary() {\n    for (let pair of this.pairs) {\n      let val = this.dictionary.get(pair.key);\n      if (!val) {\n        val = new Set();\n        this.dictionary.set(pair.key, val);\n      }\n      val.add(pair.value);\n    }\n  }\n\n  abstract markWarnings(): Map<string, warning>;\n}\n\nexport default Dictionary;\n","import React, { useContext, useState, createContext, useMemo } from \"react\";\nimport uuidv4 from \"uuid/v4\";\nimport { warning, Pair } from \"./models/dictionary\";\n\nexport type UpdatePair = (\n  dictionaruId: string,\n  { id, key, value }: Pair & { id: string }\n) => void;\nexport type DeletePair = (dictionaruId: string, pairId: string) => void;\nexport type UpdateStructure = (\n  dictionaryId: string,\n  structures: Structure[]\n) => void;\n\ntype Service = {\n  addDictionary(name: string): void;\n  deleteDictionary(id: string): void;\n  addPair(dictionaruId: string, { key, value }: Pair): void;\n  deletePair: DeletePair;\n  updatePair: UpdatePair;\n  updateStructure: UpdateStructure;\n};\n\ntype Dictionary = { id: string; name: string };\nexport type Structure = {\n  id: string;\n  key: string;\n  value: string;\n  warnings: warning[];\n};\n\nexport const storeInLocalStorage = (name: string, object: Object) => {\n  window.localStorage.setItem(name, JSON.stringify(object));\n};\n\nexport const getFromLocalStorage = (): {\n  dictionaries: Dictionary[];\n  structures: { [id: string]: Structure[] };\n} => {\n  let dictionaries: Dictionary[];\n  let structures: { [id: string]: Structure[] };\n  try {\n    dictionaries = JSON.parse(\n      window.localStorage.getItem(\"dictionaries\") || \"[]\"\n    );\n    structures = JSON.parse(window.localStorage.getItem(\"structures\") || \"{}\");\n  } finally {\n  }\n  return { dictionaries, structures };\n};\n\nexport const StateContext: React.Context<{\n  dictionaries: Dictionary[];\n  structures: { [key: string]: Structure[] };\n  service: Service;\n}> = createContext({\n  dictionaries: [{ id: \"\", name: \"\" }],\n  structures: {},\n  service: {\n    addDictionary: name => {},\n    deleteDictionary: id => {},\n    addPair: (id, { key, value }) => {},\n    deletePair: (did, pid) => {},\n    updatePair: (did, { id, key, value }) => {},\n    updateStructure: (did, structures) => {}\n  }\n});\n\ninterface IStateProvider {\n  initialState: {\n    dictionaries: Dictionary[];\n    structures: { [key: string]: Structure[] };\n  };\n}\nexport const StateProvider: React.FC<IStateProvider> = ({\n  initialState,\n  children\n}) => {\n  const [dictionaries, setDictionaries] = useState<\n    { id: string; name: string }[]\n  >(initialState.dictionaries || []);\n\n  const [structures, setStructures] = useState<{ [key: string]: Structure[] }>(\n    initialState.structures || {}\n  );\n  const service: Service = useMemo(() => {\n    return {\n      addDictionary: name => {\n        const id = uuidv4();\n        setDictionaries(dictionaries => {\n          const newValue = [...dictionaries, { id, name }];\n          storeInLocalStorage(\"dictionaries\", newValue);\n          return newValue;\n        });\n        setStructures(structures => {\n          const newValue = { ...structures, [id]: [] };\n          storeInLocalStorage(\"structures\", newValue);\n          return newValue;\n        });\n      },\n      deleteDictionary: id => {\n        setDictionaries(dictionaries => {\n          const newValue = dictionaries.filter(x => x.id !== id);\n          storeInLocalStorage(\"dictionaries\", newValue);\n          return newValue;\n        });\n        setStructures(structures => {\n          const { [id]: value, ...rest } = structures;\n          storeInLocalStorage(\"structures\", rest);\n          return rest;\n        });\n      },\n      addPair: (dictionaryId, { key, value }) => {\n        const id = uuidv4();\n        setStructures(structures => {\n          const newValue = {\n            ...structures,\n            [dictionaryId]: [\n              ...structures[dictionaryId],\n              { id, key, value, warnings: [] }\n            ]\n          };\n          return newValue;\n        });\n      },\n      deletePair: (dictionaryId, pairId) => {\n        setStructures(structures => {\n          const newValue = {\n            ...structures,\n            [dictionaryId]: structures[dictionaryId].filter(\n              x => x.id !== pairId\n            )\n          };\n          return newValue;\n        });\n      },\n      updatePair: (dictionaryId, { id, key, value }) => {\n        setStructures(structures => {\n          const newValue = {\n            ...structures,\n            [dictionaryId]: structures[dictionaryId].map(x =>\n              x.id !== id ? x : { id, key, value, warnings: [] }\n            )\n          };\n          return newValue;\n        });\n      },\n      updateStructure: (dictionaryId, newStructures) => {\n        setStructures(structures => {\n          const newValue = {\n            ...structures,\n            [dictionaryId]: newStructures\n          };\n          storeInLocalStorage(\"structures\", newValue);\n          return newValue;\n        });\n      }\n    };\n  }, []);\n\n  return (\n    <StateContext.Provider value={{ dictionaries, structures, service }}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React, { useCallback, useState } from \"react\";\nimport { useStateValue } from \"../state\";\nimport { Link } from \"react-router-dom\";\nimport \"./Overview.scss\";\n\nconst NewDictionaryForm: React.FC = () => {\n  const { service } = useStateValue();\n  const [name, setName] = useState<string>(\"\");\n\n  const updateName = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setName(event.target.value);\n    },\n    []\n  );\n\n  const addDictionary = useCallback(\n    (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      service.addDictionary(name);\n      setName(\"\");\n    },\n    [name, service]\n  );\n\n  return (\n    <form className=\"overview__form\" onSubmit={addDictionary}>\n      <input\n        className=\"overview__input\"\n        data-testid=\"newValue\"\n        value={name}\n        onChange={updateName}\n      />\n      <button className=\"overview__button--add\" data-testid=\"add\">\n        + Add\n      </button>\n    </form>\n  );\n};\n\nconst Overwiew: React.FC = () => {\n  const { dictionaries, service } = useStateValue();\n\n  const deleteDictionary = useCallback(\n    (id: string) => () => {\n      service.deleteDictionary(id);\n    },\n    [service]\n  );\n  return (\n    <section className=\"overview\">\n      <header>Overview</header>\n      <ul className=\"overview__list\">\n        {dictionaries.map(x => (\n          <li className=\"overview__item\" key={x.id}>\n            <Link className=\"overview__item-link\" to={`/${x.id}`}>\n              {x.name}\n            </Link>\n            <button\n              className=\"overview__button--delete\"\n              data-testid={`delete-${x.id}`}\n              title=\"Delete dictionary\"\n              onClick={deleteDictionary(x.id)}\n            >\n              x\n            </button>\n          </li>\n        ))}\n      </ul>\n      <NewDictionaryForm />\n    </section>\n  );\n};\n\nexport default Overwiew;\n","import Dictionary, { warning, Pair } from \"./dictionary\";\n\nenum color {\n  white,\n  gray,\n  black\n}\n\nclass CycledDictionary extends Dictionary {\n  constructor(pairs: Pair[]) {\n    super(pairs, warning.loop);\n  }\n\n  private findLoop(\n    v: string,\n    colors: Map<string, color>,\n    stack: string[],\n    result: string[][]\n  ): any {\n    if (colors.get(v) === color.black) {\n      return;\n    }\n\n    if (colors.get(v) === color.gray) {\n      const idx = stack.indexOf(v);\n      result.push(stack.slice(idx));\n      return;\n    }\n\n    colors.set(v, color.gray);\n    stack.push(v);\n\n    const children = this.dictionary.get(v);\n    if (children) {\n      for (let child of children) {\n        this.findLoop(child, colors, stack, result);\n      }\n    }\n    stack.pop();\n\n    colors.set(v, color.black);\n  }\n\n  markWarnings(): Map<string, warning> {\n    const result: Map<string, warning> = new Map();\n    const colors: Map<string, color> = new Map();\n\n    for (let v of this.dictionary.keys()) {\n      for (let v of this.dictionary.keys()) {\n        colors.set(v, color.white);\n      }\n\n      const stack: string[] = [];\n      let loops: string[][] = [];\n      this.findLoop(v, colors, stack, loops);\n      loops.forEach(x => {\n        for (let i = 1; i < x.length; i++) {\n          result.set(\n            JSON.stringify({ key: x[i - 1], value: x[i] }),\n            this.watningLevel\n          );\n        }\n        result.set(\n          JSON.stringify({ key: x[x.length - 1], value: x[0] }),\n          this.watningLevel\n        );\n      });\n    }\n    return result;\n  }\n}\n\nexport default CycledDictionary;\n","import Dictionary, { warning, Pair } from \"./dictionary\";\n\nclass DuplicatedDictionary extends Dictionary {\n  constructor(pairs: Pair[]) {\n    super(pairs, warning.duplicate);\n  }\n\n  markWarnings(): Map<string, warning> {\n    const result = new Map();\n    const dict: Map<string, Set<string>> = new Map();\n\n    for (let pair of this.pairs) {\n      let val = dict.get(pair.key);\n      if (!val) {\n        val = new Set();\n        dict.set(pair.key, val);\n      }\n      if (val.has(pair.value)) {\n        result.set(JSON.stringify(pair), this.watningLevel);\n      }\n      val.add(pair.value);\n    }\n\n    return result;\n  }\n}\n\nexport default DuplicatedDictionary;\n","import Dictionary, { warning, Pair } from \"./dictionary\";\n\nclass ForkedDictionary extends Dictionary {\n  constructor(pairs: Pair[]) {\n    super(pairs, warning.fork);\n  }\n  markWarnings(): Map<string, warning> {\n    const result = new Map();\n    for (let [key, value] of this.dictionary) {\n      if (value.size > 1) {\n        for (let v of value.keys()) {\n          result.set(JSON.stringify({ key, value: v }), this.watningLevel);\n        }\n      }\n    }\n\n    return result;\n  }\n}\n\nexport default ForkedDictionary;\n","import Dictionary, { warning, Pair } from \"./dictionary\";\n\nclass ChainedDictionary extends Dictionary {\n  constructor(pairs: Pair[]) {\n    super(pairs, warning.chain);\n  }\n  markWarnings(): Map<string, warning> {\n    const result = new Map();\n    for (let pair of this.pairs) {\n      if (this.dictionary.get(pair.value) !== undefined) {\n        result.set(JSON.stringify(pair), this.watningLevel);\n        for (let v of this.dictionary.get(pair.value)!) {\n          result.set(\n            JSON.stringify({ key: pair.value, value: v }),\n            this.watningLevel\n          );\n        }\n      }\n    }\n    return result;\n  }\n}\n\nexport default ChainedDictionary;\n","import { useState, useEffect } from \"react\";\nimport { warning } from \"../models/dictionary\";\nimport { Structure, UpdateStructure } from \"../state\";\nimport DictionaryModel from \"../models/dictionary\";\nimport DuplicatedDictionary from \"../models/duplicatedDictionary\";\nimport ForkedDictionary from \"../models/forkedDictionary\";\nimport ChainedDictionary from \"../models/chainedDictionary\";\nimport CycledDictionary from \"../models/cycledDictionary\";\n\nconst useValidation = (\n  dictionaryId: string | undefined,\n  dictionary: Structure[],\n  updateStructure: UpdateStructure\n) => {\n  const [isValidating, setIsValidating] = useState(false);\n\n  useEffect(() => {\n    if (dictionaryId === undefined || dictionary === undefined) return;\n    setIsValidating(true);\n    const pairs = dictionary.map(x => ({ key: x.key, value: x.value }));\n    const checks: DictionaryModel[] = [\n      new DuplicatedDictionary(pairs),\n      new ForkedDictionary(pairs),\n      new ChainedDictionary(pairs),\n      new CycledDictionary(pairs)\n    ];\n    const warnings = checks.map(x => x.markWarnings());\n    let hasChanges = false;\n    const newStructure = dictionary.map(x => {\n      let levels = warnings.reduce<warning[]>((curr, next) => {\n        const level = next.get(JSON.stringify({ key: x.key, value: x.value }));\n        if (level) {\n          curr.push(level);\n        }\n\n        return curr;\n      }, []);\n      levels = levels.length ? levels : [0];\n      if (JSON.stringify(levels) === JSON.stringify(x.warnings)) {\n        return x;\n      }\n      hasChanges = true;\n      return { ...x, warnings: levels };\n    });\n    if (hasChanges) {\n      updateStructure(dictionaryId, newStructure);\n    }\n\n    setIsValidating(false);\n  }, [dictionaryId, dictionary, updateStructure]);\n\n  return { isValidating };\n};\n\nexport default useValidation;\n","import React, { useCallback, useMemo, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport { useStateValue, Structure, UpdatePair, DeletePair } from \"../state\";\nimport { Pair } from \"../models/dictionary\";\nimport useValidation from \"../hooks/useValidation\";\nimport \"./Dictionary.scss\";\n\nconst NewPairForm: React.FC = () => {\n  const { service } = useStateValue();\n  const { dictionaryId } = useParams();\n  const [newPair, setNewPair] = useState<Pair>({ key: \"\", value: \"\" });\n  const updateNewPair = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newVal = {\n        ...newPair,\n        [event.target.name]: event.target.value\n      };\n      setNewPair(newVal);\n    },\n    [newPair]\n  );\n  const addPair = useCallback(\n    (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      if (dictionaryId) {\n        service.addPair(dictionaryId, newPair);\n        setNewPair({ key: \"\", value: \"\" });\n      }\n    },\n    [service, newPair, dictionaryId]\n  );\n  return (\n    <form className=\"dictionary__form\" onSubmit={addPair}>\n      <input\n        className=\"dictionary__input\"\n        data-testid=\"key\"\n        value={newPair.key}\n        name=\"key\"\n        onChange={updateNewPair}\n      />\n      <input\n        className=\"dictionary__input\"\n        data-testid=\"value\"\n        value={newPair.value}\n        name=\"value\"\n        onChange={updateNewPair}\n      />\n      <button className=\"dictionary__button--add\" data-testid=\"add\">\n        + Add\n      </button>\n    </form>\n  );\n};\n\ninterface IDictionaryItemProps {\n  item: Structure;\n  updateItem: UpdatePair;\n  deleteItem: DeletePair;\n}\nconst DictionaryItem: React.FC<IDictionaryItemProps> = React.memo(\n  ({ item, updateItem, deleteItem }) => {\n    const { dictionaryId } = useParams();\n\n    const onUpdate = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const newVal = {\n        ...item,\n        [event.target.name]: event.target.value\n      };\n      if (dictionaryId) {\n        updateItem(dictionaryId, newVal);\n      }\n    };\n    const onDelete = () => {\n      if (dictionaryId) {\n        deleteItem(dictionaryId, item.id);\n      }\n    };\n    return (\n      <div className=\"dictionary__item\" data-testid={`item-${item.id}`}>\n        <input\n          className=\"dictionary__item-input\"\n          value={item.key}\n          name=\"key\"\n          onChange={onUpdate}\n        />\n        <input\n          className=\"dictionary__item-input\"\n          value={item.value}\n          name=\"value\"\n          onChange={onUpdate}\n        />\n        <button\n          className=\"dictionary__button--delete\"\n          data-testid={`delete-${item.id}`}\n          onClick={onDelete}\n        >\n          x\n        </button>\n        <div className=\"dictionary__warning-wrapper\">\n          {(item.warnings || []).map(x => (\n            <span\n              key={x}\n              className={classNames(\n                \"dictionary__warning\",\n                `dictionary__warning--${x}`\n              )}\n            ></span>\n          ))}\n        </div>\n      </div>\n    );\n  }\n);\n\nconst DictionaryWarnings: React.FC = () => (\n  <>\n    <h6>Instructions</h6>\n    <div className=\"instruction__item dictionary__warning-wrapper\">\n      <span className=\"dictionary__warning dictionary__warning--0\"></span> No\n      warnings\n    </div>\n    <div className=\"instruction__item dictionary__warning-wrapper\">\n      <span className=\"dictionary__warning dictionary__warning--1\"></span>{\" \"}\n      Duplicate\n    </div>\n    <div className=\"instruction__item dictionary__warning-wrapper\">\n      <span className=\"dictionary__warning dictionary__warning--2\"></span> Fork\n    </div>\n    <div className=\"instruction__item dictionary__warning-wrapper\">\n      <span className=\"dictionary__warning dictionary__warning--3\"></span> Chain\n    </div>\n    <div className=\"instruction__item dictionary__warning-wrapper\">\n      <span className=\"dictionary__warning dictionary__warning--4\"></span> Cycle\n    </div>\n  </>\n);\n\nconst Dictionary: React.FC = () => {\n  const { dictionaryId } = useParams();\n  const { dictionaries, structures, service } = useStateValue();\n  const dictionary = useMemo(() => {\n    return dictionaries.find(x => x.id === dictionaryId);\n  }, [dictionaryId, dictionaries]);\n  const structure = useMemo(() => {\n    if (!dictionaryId) return [];\n    return structures[dictionaryId];\n  }, [dictionaryId, structures]);\n  const { isValidating } = useValidation(\n    dictionaryId,\n    structure,\n    service.updateStructure\n  );\n\n  if (!dictionary) {\n    return <div>Dictionary is not found</div>;\n  }\n\n  return (\n    <section className=\"dictionary\">\n      <header>Dictionary: {dictionary.name}</header>\n      <div className=\"dictionary__list\">\n        {structure.map(x => (\n          <DictionaryItem\n            key={x.id}\n            item={x}\n            updateItem={service.updatePair}\n            deleteItem={service.deletePair}\n          />\n        ))}\n      </div>\n      <NewPairForm />\n      {isValidating && <span>Validation...</span>}\n      <footer>\n        <DictionaryWarnings />\n      </footer>\n    </section>\n  );\n};\n\nexport default Dictionary;\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Overwiew from \"./Overview\";\nimport Dictionary from \"./Dictionary\";\nimport { StateProvider, getFromLocalStorage } from \"../state\";\nimport \"./App.scss\";\n\nconst App: React.FC = () => {\n  const { dictionaries, structures } = getFromLocalStorage();\n  return (\n    <StateProvider initialState={{ dictionaries, structures }}>\n      <Router>\n        <header>\n          <Link className=\"app__header\" to=\"/\">\n            Dictionary Management\n          </Link>\n        </header>\n        <Switch>\n          <Route path=\"/:dictionaryId\">\n            <Dictionary />\n          </Route>\n          <Route path=\"/\">\n            <Overwiew />\n          </Route>\n        </Switch>\n      </Router>\n    </StateProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}